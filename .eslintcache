[{"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\index.js":"1","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\App.js":"2","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\SearchBox\\SearchBox.js":"3","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\WeatherSection\\WeatherSection.js":"4","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\CurrentForecast\\CurrentForecast.js":"5","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\ForecastTab\\ForecastTab.js":"6","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\MapSection\\MapSection.js":"7","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\BikeMap\\BikeMap.js":"8","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\MapContext\\MapContext.js":"9","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\MapInfo\\MapInfo.js":"10","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\Footer\\Footer.js":"11","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\DataPage\\DataPage.js":"12","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\HomePage\\HomePage.js":"13"},{"size":220,"mtime":1607315782750,"results":"14","hashOfConfig":"15"},{"size":514,"mtime":1608184597093,"results":"16","hashOfConfig":"15"},{"size":1291,"mtime":1608059608852,"results":"17","hashOfConfig":"15"},{"size":3154,"mtime":1608286114825,"results":"18","hashOfConfig":"15"},{"size":4200,"mtime":1608286513949,"results":"19","hashOfConfig":"15"},{"size":611,"mtime":1608184667596,"results":"20","hashOfConfig":"15"},{"size":441,"mtime":1608282888478,"results":"21","hashOfConfig":"15"},{"size":2438,"mtime":1608282913218,"results":"22","hashOfConfig":"15"},{"size":105,"mtime":1607910283117,"results":"23","hashOfConfig":"15"},{"size":602,"mtime":1607920068788,"results":"24","hashOfConfig":"15"},{"size":264,"mtime":1607966464987,"results":"25","hashOfConfig":"15"},{"size":856,"mtime":1608282868076,"results":"26","hashOfConfig":"15"},{"size":447,"mtime":1608184454778,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1644ql",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\index.js",[],["56","57"],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\App.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\SearchBox\\SearchBox.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\WeatherSection\\WeatherSection.js",["58"],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\CurrentForecast\\CurrentForecast.js",["59"],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\ForecastTab\\ForecastTab.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\MapSection\\MapSection.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\BikeMap\\BikeMap.js",["60"],"import React, { useState, useEffect } from 'react';\r\nimport ReactMapGL from 'react-map-gl';\r\nimport './BikeMap.css';\r\n\r\n// uses the MapBox API for the map and the Google Geocoding API for the location\r\n\r\n// =====================================\r\n\r\nconst BikeMap = (props) => {\r\n\r\n    // hook for getting the location data from the google api\r\n\t//const [location, setLocation] = useState({});\r\n\r\n    // !!TODO -- apparently, the props arent sending through anymore... need to fix\r\n    // checks if the query was successfully sent in the props, and if it was, then it will run the api fetch request\r\n    useEffect(()=>{\r\n        //if(props && props.query && props.query !== ''){}\r\n        //console.log('bikemap props: ', props);\r\n        //getLatAndLong(props.query);\r\n\r\n    },[]);\r\n\r\n\r\n    // Google Geocoding API stuff\r\n    const googleAPIkey = 'AIzaSyCjwsWu1EqiE2WazgNayzqUIHMpnHAsDZo';\r\n        \r\n    // using the google api, determine and the latitude and longitude based on the location the user entered\r\n\tconst getLatAndLong = (query) => {\r\n        fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=+miami,+USA&key=${googleAPIkey}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result);\r\n                //setLocation(result);\r\n                //latitude = location.results[0].geometry.location.lat;\r\n                //longitude = location.results[0].geometry.location.lng;   \r\n            });\r\n    }   \r\n\r\n    // !!TODO This is happening before the fetch request gets the lat/long data-- figure out how to get it to happen after the data is fetched\r\n    // MapBox API stuff\r\n    const mapboxApiAccessToken = 'pk.eyJ1Ijoic2t5dmFsZSIsImEiOiJja2lueDIzMDcxNzhiMnNzdjdvbGlreGNuIn0.TuSm75u2GLQlTdA2YOf4wQ';\r\n    const [viewport, setViewport] = useState({\r\n        width: '600px',\r\n        height: '600px',\r\n        latitude: 36,\r\n        longitude: -81,\r\n        //latitude: `${latitude}`,\r\n        //longitude: `${longitude}`,\r\n        zoom: 10\r\n    });\r\n    \r\n    return(\r\n        <div className='map-container'>\r\n            <ReactMapGL \r\n                {...viewport} \r\n                mapboxApiAccessToken={mapboxApiAccessToken}\r\n                mapStyle='mapbox://styles/skyvale/ckiny3d0h127l18n65lkffaqw'\r\n                onViewportChange = {viewport => {setViewport(viewport)}}>\r\n            </ReactMapGL>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BikeMap;","C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\MapContext\\MapContext.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\MapInfo\\MapInfo.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\DataPage\\DataPage.js",[],"C:\\Users\\skyla\\OneDrive\\Desktop\\Repos\\portv\\src\\components\\HomePage\\HomePage.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":65,"column":60,"nodeType":"67","messageId":"68","endLine":65,"endColumn":62},{"ruleId":"69","severity":1,"message":"70","line":40,"column":9,"nodeType":"71","messageId":"72","endLine":50,"endColumn":10},{"ruleId":"73","severity":1,"message":"74","line":28,"column":8,"nodeType":"75","messageId":"76","endLine":28,"endColumn":21},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'getLatAndLong' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]